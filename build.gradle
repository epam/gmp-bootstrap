/*
 *  /***************************************************************************
 *  Copyright (c) 2017, EPAM SYSTEMS INC
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  ***************************************************************************
 */

allprojects {
    group group
    version version

    apply plugin: 'groovy'
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()

        flatDir {
            dirs 'lib'
        }

        maven {
            url 'http://maven.jahia.org/maven2'
        }

        maven {
            url "https://m2proxy.atlassian.com/repository/public"
        }

        maven {
            url 'https://maven.atlassian.com/content/repositories/atlassian-public'
        }

        maven {
            url "https://oss.sonatype.org/content/groups/staging"
        }

        maven {
            url 'https://artifacts.elastic.co/maven'
        }
    }

    configurations {
        compile
        runtime
        export
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "org.owasp:dependency-check-gradle:3.0.2"
    }
}

apply plugin: 'org.sonarqube'
sonarqube {
    properties {
        property "sonar.scm.disabled","true"
    }
}

apply plugin: 'org.owasp.dependencycheck'
dependencyCheck {
    // XML is required for Sonarqube, HTML beautifies the report
    format = 'ALL'
    cve {
        url20Modified = 'https://nvd.nist.gov/feeds/xml/cve/2.0/nvdcve-2.0-modified.xml.gz'
        url20Base = 'https://nvd.nist.gov/feeds/xml/cve/2.0/nvdcve-2.0-%d.xml.gz'
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/$outPath/../lib"
    from configurations.compile
}

sourceSets {
    main {
        groovy { exclude '*.groovy' }
        java {}
    }
}

task copyScripts(type: Copy) {
    into "$buildDir/$outPath/groovyRoot"
    from('src/main/groovy') {
        include '*.groovy'
        include '*.properties'
    }
}
boolean buildWarArtifact

task buildWar() {
    buildWarArtifact = Boolean.parseBoolean(project.getProperties().get('web', outWar))
}

if (buildWarArtifact) {
    apply plugin: 'war'
    war.dependsOn copyScripts
}

if (!buildWarArtifact) {
    sourceSets {
        main {
            java { exclude 'com/epam/gmp/web/**', 'com/epam/gmp/Web**' }
        }
    }
}

dependencies {
    compile project(':customizations')

    if (buildWarArtifact) {
        compile "org.springframework:spring-webmvc:${springVersion}"
        compile "org.springframework.security:spring-security-web:4.2.3.RELEASE"
        compile "org.hibernate:hibernate-validator:4.3.1.Final"
        compile "org.springframework:spring-context:${springVersion}"
        //-- JSTL --
        compile "javax.servlet:jstl:${jstlVersion}"
        compile group: 'javax.servlet', name: 'javax.servlet-api', version: servletVersion
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.springframework:spring-aspects:${springVersion}"
    }

    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    testCompile group: 'junit', name: 'junit', version: jUnitVersion

    compile "org.apache.commons:commons-compress:1.15"
    /*   compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-annotations:${jettyVersion}"
    compile "org.eclipse.jetty:apache-jsp:${jettyVersion}"*/
}

def rootBuildDir = buildDir

tasks.withType(Jar) {
    destinationDir = file("$rootBuildDir/$outPath/../")
}

jar {
    manifest {
        attributes 'Implementation-Title': 'GMP bootstrap',
                'Implementation-Version': version,
                'Main-Class': 'com.epam.gmp.ChainExecutor',
                "Class-Path": configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
}

jar.dependsOn copyScripts, copyToLib